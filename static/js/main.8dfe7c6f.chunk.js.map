{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/TableHead.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","search","useLocation","className","role","to","pathname","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","ok","Error","status","statusText","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","type","placeholder","onChange","event","target","map","century","centuryParams","includes","filter","cent","centuryClassName","length","Loader","PersonLink","person","name","slug","TableHead","sort","order","field","fieldName","toUpperCase","slice","sortParams","keySort","setSort","fieldClassName","PeopleTable","people","useParams","useState","filteredPeople","setFilteredPeople","getPerson","find","item","useEffect","personSex","toLowerCase","filtered","motherName","fatherName","some","Math","trunc","born","a","b","localeCompare","reverse","died","url","mother","father","PeoplePage","setPeople","errorMessage","setErrorMessage","loading","setLoading","getPeople","catch","finally","hasNoPeople","HomePage","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8dfe7c6f.chunk.js","sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  const { search } = useLocation();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink\n            to={{ pathname: '/people', search }}\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const search = getSearchWith(\n      searchParams,\n      { query: event.target.value || null },\n    );\n\n    setSearchParams(search);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => {\n              const centuryParams = {\n                centuries: centuries.includes(century)\n                  ? centuries.filter(cent => century !== cent)\n                  : [...centuries, century],\n              };\n              const centuryClassName = classNames(\n                'button mr-1',\n                { 'is-info': centuries.includes(century) },\n              );\n\n              return (\n                <SearchLink\n                  key={century}\n                  params={centuryParams}\n                  data-cy=\"century\"\n                  className={centuryClassName}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': !!centuries.length },\n              )}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ sex: null, query: null, centuries: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = (\n  { person: { name, sex, slug } },\n) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{ pathname: `/people/${slug}`, search }}\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const TableHead = () => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  function setSort(keySort: string) {\n    const sortParams = { sort, order };\n\n    if (sort !== keySort) {\n      sortParams.sort = keySort;\n      sortParams.order = null;\n    } else if (!order) {\n      sortParams.order = 'desc';\n    } else {\n      sortParams.sort = null;\n      sortParams.order = null;\n    }\n\n    return sortParams;\n  }\n\n  return (\n    <tr>\n      {['name', 'sex', 'born', 'died'].map(field => {\n        const fieldName = field[0].toUpperCase() + field.slice(1);\n        const sortParams = setSort(field);\n        const fieldClassName = classNames(\n          'fas',\n          { 'fa-sort': sort !== field },\n          { 'fa-sort-up': sort === field && !order },\n          { 'fa-sort-down': sort === field && order },\n        );\n\n        return (\n          <th key={field}>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              {fieldName}\n              <SearchLink params={sortParams}>\n                <span className=\"icon\">\n                  <i className={fieldClassName} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n        );\n      })}\n\n      <th>Mother</th>\n      <th>Father</th>\n    </tr>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { TableHead } from './TableHead';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n  const [filteredPeople, setFilteredPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    const sort = searchParams.get('sort');\n    const order = searchParams.get('order');\n    const personSex = searchParams.get('sex');\n    const query = searchParams.get('query')?.toLowerCase();\n    const centuries = searchParams.getAll('centuries');\n\n    let filtered = personSex\n      ? people.filter(item => item.sex === personSex)\n      : [...people];\n\n    if (query) {\n      filtered = filtered.filter(item => item.name.toLowerCase().includes(query)\n        || item.motherName?.toLowerCase().includes(query)\n        || item.fatherName?.toLowerCase().includes(query));\n    }\n\n    if (centuries.length) {\n      filtered = filtered.filter(person => centuries.some(\n        century => Math.trunc(person.born / 100) + 1 === +century,\n      ));\n    }\n\n    if (sort === 'born' || sort === 'died') {\n      filtered.sort((a, b) => a[sort] - b[sort]);\n    }\n\n    if (sort === 'name' || sort === 'sex') {\n      filtered.sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    if (order) {\n      filtered.reverse();\n    }\n\n    setFilteredPeople(filtered);\n  }, [people, searchParams]);\n\n  function getPerson(name: string | null) {\n    const person = people.find(item => item.name === name);\n\n    if (person) {\n      return <PersonLink person={person} />;\n    }\n\n    return name || '-';\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <TableHead />\n      </thead>\n\n      <tbody>\n        {filteredPeople.map(person => {\n          const {\n            sex, born, died, motherName, fatherName, slug: url,\n          } = person;\n\n          const mother = getPerson(motherName);\n          const father = getPerson(fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={url}\n              className={classNames({\n                'has-background-warning': slug === url,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>{mother}</td>\n              <td>{father}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getPeople()\n      .then((response) => {\n        setPeople(response);\n        setErrorMessage('');\n      })\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setLoading(false));\n  }, []);\n\n  const hasNoPeople = !people.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!hasNoPeople && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading\n                ? <Loader />\n                : (hasNoPeople && !errorMessage && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                ))}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {!hasNoPeople && (\n                <PeopleTable people={people} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </HashRouter>\n  );\n};\n","// import { createRoot } from 'react-dom/client';\n// import { HashRouter as Router } from 'react-router-dom';\n\n// import 'bulma/css/bulma.css';\n// import '@fortawesome/fontawesome-free/css/all.css';\n\n// import { App } from './App';\n\n// createRoot(document.getElementById('root') as HTMLDivElement)\n//   .render(\n//     <Router>\n//       <App />\n//     </Router>,\n//   );\n\nimport { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}